"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Erika Chang, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

HMC2674
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self._performance = INITIAL_PERFORMANCE
        self._happiness = INITIAL_HAPPINESS
        self._salary = salary


    @property
    def name(self):
        """
        returns name
        """
        return self.__name

    @property
    def manager(self):
        """
        returns manager
        """
        return self.__manager

    @property
    def performance(self):
        """
        returns performance
        """
        return self._performance

    @performance.setter
    def performance(self, value):
        """
        sets performance to be between 0-100
        """
        if value < PERCENTAGE_MIN:
            self._performance = PERCENTAGE_MIN
        elif value > PERCENTAGE_MAX:
            self._performance = PERCENTAGE_MAX
        else:
            self._performance = value

    @property
    def happiness(self):
        """
        returns happiness
        """
        return self._happiness

    @happiness.setter
    def happiness(self, value):
        if value < PERCENTAGE_MIN:
            self._happiness = PERCENTAGE_MIN
        elif value > PERCENTAGE_MAX:
            self._happiness = PERCENTAGE_MAX
        else:
            self._happiness = value

    @property
    def salary(self):
        """
        returns salary
        """
        return self._salary

    @salary.setter
    def salary(self, value):
        if value < 0:
            raise ValueError("Salary must be a non-negative value")
        self._salary = value

    @abstractmethod
    def work(self):
        """
        abstract method to be implemented by subclass
        """


    def interact(self, other):
        """
        interact function between 2 employees,
        should only change self and not other
        """
        if other.name not in self.relationships:
            self.relationships[other.name] = 0

        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self._happiness += 1

        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1

        else:
            self.relationships[other.name] -= 1
            self._happiness -= 1

    def daily_expense(self):
        """
        subtracts amt of daily expenses
        """
        self._happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        return (
            f"{self.name}\n\t"
            f"Salary: ${self._salary}\n\t"
            f"Savings: ${self.savings}\n\t"
            f"Happiness: {self._happiness}%\n\t"
            f"Performance: {self._performance}%"
        )


class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """

    def work(self):
        ran_performance = random.randint(-5, 5)
        self.performance += ran_performance
        if ran_performance < 0:
            self._happiness -= 1
            for name in self.relationships:
                self.relationships[name] -= 1
        elif ran_performance > 0:
            self._happiness += 1


class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """

    def work(self):
        temp_ran_performance = random.randint(-15, 15)
        self.performance += temp_ran_performance
        if temp_ran_performance <= 0:
            self._happiness -= 2
        else:
            self._happiness += 1

    def interact(self, other):
        super().interact(other)
        if isinstance(other, Manager):
            if (other.happiness > HAPPINESS_THRESHOLD and
                    self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD):
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.salary //= 2
                self._happiness -= 5
                if self.salary == 0:
                    self.is_employed = False


class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """

    def work(self):
        """
        simulates 1 hr of work for perm employee
        """
        ran_performance = random.randint(-10, 10)
        self.performance += ran_performance
        if ran_performance >= 0:
            self._happiness += 1

    def interact(self, other):
        super().interact(other)
        if isinstance(other, Manager):
            if (other.happiness > HAPPINESS_THRESHOLD and
                    self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD):
                self.savings += MANAGER_BONUS

            elif other.happiness <= HAPPINESS_THRESHOLD:
                self._happiness -= 1
